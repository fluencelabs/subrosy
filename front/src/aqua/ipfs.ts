/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-358
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';
import { callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';

// Services

export interface IpfsClientDef {
    exists: (multiaddr: string, cid: string, callParams: CallParams<'multiaddr' | 'cid'>) => boolean | Promise<boolean>;
    id: (multiaddr: string, callParams: CallParams<'multiaddr'>) => string | Promise<string>;
    remove: (multiaddr: string, cid: string, callParams: CallParams<'multiaddr' | 'cid'>) => string | Promise<string>;
    upload: (multiaddr: string, path: string, callParams: CallParams<'multiaddr' | 'path'>) => string | Promise<string>;
}
export function registerIpfsClient(service: IpfsClientDef): void;
export function registerIpfsClient(serviceId: string, service: IpfsClientDef): void;
export function registerIpfsClient(peer: FluencePeer, service: IpfsClientDef): void;
export function registerIpfsClient(peer: FluencePeer, serviceId: string, service: IpfsClientDef): void;

export function registerIpfsClient(...args: any) {
    registerService(args, {
        defaultServiceId: 'ipfs_client',
        functions: {
            tag: 'labeledProduct',
            fields: {
                exists: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            multiaddr: {
                                tag: 'scalar',
                                name: 'string',
                            },
                            cid: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'bool',
                            },
                        ],
                    },
                },
                id: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            multiaddr: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
                remove: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            multiaddr: {
                                tag: 'scalar',
                                name: 'string',
                            },
                            cid: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
                upload: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            multiaddr: {
                                tag: 'scalar',
                                name: 'string',
                            },
                            path: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'string',
                            },
                        ],
                    },
                },
            },
        },
    });
}

// Functions

export function upload(multiaddr: string, path: string, config?: { ttl?: number }): Promise<string>;

export function upload(peer: FluencePeer, multiaddr: string, path: string, config?: { ttl?: number }): Promise<string>;

export function upload(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "multiaddr") [] multiaddr)
                        )
                        (call %init_peer_id% ("getDataSrv" "path") [] path)
                       )
                       (xor
                        (call %init_peer_id% ("ipfs_client" "upload") [multiaddr path] cid)
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [cid])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'upload',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        multiaddr: {
                            tag: 'scalar',
                            name: 'string',
                        },
                        path: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'string',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
