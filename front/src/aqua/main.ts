/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-358
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';
import { callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';

// Services

export interface RConsoleDef {
    print: (
        r: {
            metadata: {
                issued_by: string;
                issuer_signature: number[];
                key_id: string;
                peer_id: string;
                relay_id: string[];
                service_id: string[];
                solution: number[];
                timestamp_issued: number;
                value: string;
            };
            signature: number[];
            timestamp_created: number;
        },
        callParams: CallParams<'r'>,
    ) => void | Promise<void>;
}
export function registerRConsole(service: RConsoleDef): void;
export function registerRConsole(serviceId: string, service: RConsoleDef): void;
export function registerRConsole(peer: FluencePeer, service: RConsoleDef): void;
export function registerRConsole(peer: FluencePeer, serviceId: string, service: RConsoleDef): void;

export function registerRConsole(...args: any) {
    registerService(args, {
        defaultServiceId: 'run-console',
        functions: {
            tag: 'labeledProduct',
            fields: {
                print: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            r: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                    },
                    codomain: {
                        tag: 'nil',
                    },
                },
            },
        },
    });
}

export interface NConsoleDef {
    print: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
}
export function registerNConsole(service: NConsoleDef): void;
export function registerNConsole(serviceId: string, service: NConsoleDef): void;
export function registerNConsole(peer: FluencePeer, service: NConsoleDef): void;
export function registerNConsole(peer: FluencePeer, serviceId: string, service: NConsoleDef): void;

export function registerNConsole(...args: any) {
    registerService(args, {
        defaultServiceId: 'run-console',
        functions: {
            tag: 'labeledProduct',
            fields: {
                print: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            n: {
                                tag: 'scalar',
                                name: 'u32',
                            },
                        },
                    },
                    codomain: {
                        tag: 'nil',
                    },
                },
            },
        },
    });
}

export interface ConsoleDef {
    print: (msgs: string[], callParams: CallParams<'msgs'>) => void | Promise<void>;
}
export function registerConsole(service: ConsoleDef): void;
export function registerConsole(serviceId: string, service: ConsoleDef): void;
export function registerConsole(peer: FluencePeer, service: ConsoleDef): void;
export function registerConsole(peer: FluencePeer, serviceId: string, service: ConsoleDef): void;

export function registerConsole(...args: any) {
    registerService(args, {
        defaultServiceId: 'run-console',
        functions: {
            tag: 'labeledProduct',
            fields: {
                print: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            msgs: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'string',
                                },
                            },
                        },
                    },
                    codomain: {
                        tag: 'nil',
                    },
                },
            },
        },
    });
}

// Functions

export function get_health(
    subnet: string,
    config?: { ttl?: number },
): Promise<{ last_update: number; peer_id: string; service_id: string; status: string }[][]>;

export function get_health(
    peer: FluencePeer,
    subnet: string,
    config?: { ttl?: number },
): Promise<{ last_update: number; peer_id: string; service_id: string; status: string }[][]>;

export function get_health(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "subnet") [] subnet)
                       )
                       (new $error_resolve
                        (new $statuses
                         (seq
                          (new $storages
                           (new $services
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (new $records
                                  (new $successful
                                   (new $result
                                    (seq
                                     (xor
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (call -relay- ("op" "string_to_b58") [subnet] k)
                                          (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                         )
                                         (par
                                          (fold nodes n-0
                                           (par
                                            (seq
                                             (xor
                                              (xor
                                               (seq
                                                (seq
                                                 (call n-0 ("peer" "timestamp_sec") [] t)
                                                 (call n-0 ("registry" "get_records") [subnet t] get_result)
                                                )
                                                (xor
                                                 (match get_result.$.success! true
                                                  (seq
                                                   (ap get_result.$.result! $records)
                                                   (ap true $successful)
                                                  )
                                                 )
                                                 (ap get_result.$.error! $error-0)
                                                )
                                               )
                                               (call n-0 ("op" "noop") [])
                                              )
                                              (seq
                                               (call -relay- ("op" "noop") [])
                                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                              )
                                             )
                                             (call -relay- ("op" "noop") [])
                                            )
                                            (next n-0)
                                           )
                                           (never)
                                          )
                                          (null)
                                         )
                                        )
                                        (new $status
                                         (new $result-0
                                          (seq
                                           (seq
                                            (seq
                                             (par
                                              (seq
                                               (seq
                                                (call -relay- ("math" "sub") [3 1] sub)
                                                (new $successful_test
                                                 (seq
                                                  (fold $successful s
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (call -relay- ("math" "add") [sub 1] incr_idx)
                                                      (ap s $successful_test)
                                                     )
                                                     (canon -relay- $successful_test  #successful_iter_canon)
                                                    )
                                                    (xor
                                                     (match #successful_iter_canon.length incr_idx
                                                      (null)
                                                     )
                                                     (next s)
                                                    )
                                                   )
                                                   (never)
                                                  )
                                                  (canon -relay- $successful_test  #successful_result_canon)
                                                 )
                                                )
                                               )
                                               (ap "ok" $status)
                                              )
                                              (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                             )
                                             (new $status_test
                                              (seq
                                               (fold $status s
                                                (seq
                                                 (seq
                                                  (seq
                                                   (call -relay- ("math" "add") [0 1] incr_idx)
                                                   (ap s $status_test)
                                                  )
                                                  (canon -relay- $status_test  #status_iter_canon)
                                                 )
                                                 (xor
                                                  (match #status_iter_canon.length incr_idx
                                                   (null)
                                                  )
                                                  (next s)
                                                 )
                                                )
                                                (never)
                                               )
                                               (canon -relay- $status_test  #status_result_canon)
                                              )
                                             )
                                            )
                                            (xor
                                             (match #status_result_canon.$.[0]! "ok"
                                              (ap true $result-0)
                                             )
                                             (ap false $result-0)
                                            )
                                           )
                                           (canon -relay- $result-0  #result-fix-0)
                                          )
                                         )
                                        )
                                       )
                                       (xor
                                        (match #result-fix-0.$.[0]! false
                                         (ap "timeout exceeded" $error-0)
                                        )
                                        (seq
                                         (seq
                                          (canon -relay- $records  #records_canon)
                                          (call -relay- ("registry" "merge") [#records_canon] merged)
                                         )
                                         (xor
                                          (match merged.$.success! false
                                           (ap merged.$.error! $error-0)
                                          )
                                          (ap merged.$.result! $result)
                                         )
                                        )
                                       )
                                      )
                                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                     )
                                     (canon %init_peer_id% $result  #result-fix)
                                    )
                                   )
                                  )
                                 )
                                 (canon %init_peer_id% $error-0  #push-to-stream-21)
                                )
                                (ap #push-to-stream-21 $error)
                               )
                               (canon %init_peer_id% $error  #push-to-stream-19)
                              )
                              (ap #push-to-stream-19 $error_resolve)
                             )
                             (xor
                              (mismatch #result-fix []
                               (xor
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (ap #result-fix.$.[0]! result-fix_flatten)
                                     (fold result-fix_flatten r-0
                                      (seq
                                       (xor
                                        (match r-0.$.metadata.value! "role=service"
                                         (ap r-0 $services)
                                        )
                                        (call %init_peer_id% ("op" "noop") [])
                                       )
                                       (next r-0)
                                      )
                                     )
                                    )
                                    (ap #result-fix.$.[0]! result-fix_flatten-0)
                                   )
                                   (fold result-fix_flatten-0 r-1
                                    (seq
                                     (xor
                                      (match r-1.$.metadata.value! "role=healthcheckstorage"
                                       (ap r-1 $storages)
                                      )
                                      (call %init_peer_id% ("op" "noop") [])
                                     )
                                     (next r-1)
                                    )
                                   )
                                  )
                                  (par
                                   (seq
                                    (canon %init_peer_id% $storages  #storages_canon)
                                    (fold #storages_canon storage-0
                                     (par
                                      (par
                                       (seq
                                        (canon %init_peer_id% $services  #services_canon)
                                        (fold #services_canon srv-0
                                         (par
                                          (seq
                                           (seq
                                            (seq
                                             (seq
                                              (seq
                                               (call -relay- ("op" "noop") [])
                                               (fold storage-0.$.metadata.relay_id! -via-peer-
                                                (seq
                                                 (call -via-peer- ("op" "noop") [])
                                                 (next -via-peer-)
                                                )
                                               )
                                              )
                                              (xor
                                               (call storage-0.$.metadata.peer_id! (storage-0.$.metadata.service_id.[0]! "get_status") [srv-0.$.metadata.service_id.[0]!] $statuses)
                                               (seq
                                                (seq
                                                 (fold storage-0.$.metadata.relay_id! -via-peer-
                                                  (seq
                                                   (call -via-peer- ("op" "noop") [])
                                                   (next -via-peer-)
                                                  )
                                                 )
                                                 (call -relay- ("op" "noop") [])
                                                )
                                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                               )
                                              )
                                             )
                                             (fold storage-0.$.metadata.relay_id! -via-peer-
                                              (seq
                                               (next -via-peer-)
                                               (call -via-peer- ("op" "noop") [])
                                              )
                                             )
                                            )
                                            (call -relay- ("op" "noop") [])
                                           )
                                           (call %init_peer_id% ("op" "noop") [])
                                          )
                                          (next srv-0)
                                         )
                                         (never)
                                        )
                                       )
                                       (null)
                                      )
                                      (next storage-0)
                                     )
                                     (never)
                                    )
                                   )
                                   (null)
                                  )
                                 )
                                 (par
                                  (seq
                                   (seq
                                    (seq
                                     (canon %init_peer_id% $services  #services_canon-0)
                                     (call %init_peer_id% ("op" "array_length") [#services_canon-0] array_length)
                                    )
                                    (call %init_peer_id% ("math" "sub") [array_length 1] sub-0)
                                   )
                                   (new $statuses_test
                                    (seq
                                     (fold $statuses s
                                      (seq
                                       (seq
                                        (seq
                                         (call %init_peer_id% ("math" "add") [sub-0 1] incr_idx)
                                         (ap s $statuses_test)
                                        )
                                        (canon %init_peer_id% $statuses_test  #statuses_iter_canon)
                                       )
                                       (xor
                                        (match #statuses_iter_canon.length incr_idx
                                         (null)
                                        )
                                        (next s)
                                       )
                                      )
                                      (never)
                                     )
                                     (canon %init_peer_id% $statuses_test  #statuses_result_canon)
                                    )
                                   )
                                  )
                                  (seq
                                   (seq
                                    (call %init_peer_id% ("math" "mul") [%ttl% 8] mul)
                                    (call %init_peer_id% ("math" "div") [mul 10] div)
                                   )
                                   (call %init_peer_id% ("peer" "timeout") [div ""])
                                  )
                                 )
                                )
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                               )
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                            )
                           )
                          )
                          (canon %init_peer_id% $statuses  #statuses-fix)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#statuses-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'get_health',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        subnet: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'array',
                                type: {
                                    tag: 'struct',
                                    name: 'HealthStatus',
                                    fields: {
                                        last_update: {
                                            tag: 'scalar',
                                            name: 'u64',
                                        },
                                        peer_id: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        service_id: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        status: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                    },
                                },
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
