/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-358
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';
import { callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';

// Services

export interface ConsoleDef {
    print: (msgs: string[], callParams: CallParams<'msgs'>) => void | Promise<void>;
}
export function registerConsole(service: ConsoleDef): void;
export function registerConsole(serviceId: string, service: ConsoleDef): void;
export function registerConsole(peer: FluencePeer, service: ConsoleDef): void;
export function registerConsole(peer: FluencePeer, serviceId: string, service: ConsoleDef): void;

export function registerConsole(...args: any) {
    registerService(args, {
        defaultServiceId: 'run-console',
        functions: {
            tag: 'labeledProduct',
            fields: {
                print: {
                    tag: 'arrow',
                    domain: {
                        tag: 'labeledProduct',
                        fields: {
                            msgs: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'string',
                                },
                            },
                        },
                    },
                    codomain: {
                        tag: 'nil',
                    },
                },
            },
        },
    });
}

export interface ExampleServiceDef {
    ok: (callParams: CallParams<null>) => boolean | Promise<boolean>;
}
export function registerExampleService(serviceId: string, service: ExampleServiceDef): void;
export function registerExampleService(peer: FluencePeer, serviceId: string, service: ExampleServiceDef): void;

export function registerExampleService(...args: any) {
    registerService(args, {
        functions: {
            tag: 'labeledProduct',
            fields: {
                ok: {
                    tag: 'arrow',
                    domain: {
                        tag: 'nil',
                    },
                    codomain: {
                        tag: 'unlabeledProduct',
                        items: [
                            {
                                tag: 'scalar',
                                name: 'bool',
                            },
                        ],
                    },
                },
            },
        },
    });
}

// Functions

export function simple(config?: { ttl?: number }): Promise<void>;

export function simple(peer: FluencePeer, config?: { ttl?: number }): Promise<void>;

export function simple(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call -relay- ("op" "noop") [])
                       )
                       (call "12D3KooWDcpWuyrMTDinqNgmXAuRdfd2mTdY9VoXZSAet2pDzh6r" ("op" "noop") [])
                      )
                      (xor
                       (seq
                        (seq
                         (seq
                          (new $array-inline
                           (seq
                            (ap "simpleeeeee" $array-inline)
                            (canon "12D3KooWDw6rKAG28mg9gs7aWYT9TZEMYTfb5hzPR7zTuZXwuBKE" $array-inline  #array-inline-0)
                           )
                          )
                          (call "12D3KooWDw6rKAG28mg9gs7aWYT9TZEMYTfb5hzPR7zTuZXwuBKE" ("run-console" "print") [#array-inline-0])
                         )
                         (call "12D3KooWDcpWuyrMTDinqNgmXAuRdfd2mTdY9VoXZSAet2pDzh6r" ("op" "noop") [])
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (seq
                        (seq
                         (call "12D3KooWDcpWuyrMTDinqNgmXAuRdfd2mTdY9VoXZSAet2pDzh6r" ("op" "noop") [])
                         (call -relay- ("op" "noop") [])
                        )
                        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'simple',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {},
                },
                codomain: {
                    tag: 'nil',
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function check_examples_seq(config?: { ttl?: number }): Promise<string[]>;

export function check_examples_seq(peer: FluencePeer, config?: { ttl?: number }): Promise<string[]>;

export function check_examples_seq(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                       (new $storages
                        (new $stored
                         (seq
                          (new $errs_get
                           (new $services
                            (seq
                             (seq
                              (seq
                               (seq
                                (seq
                                 (new $records
                                  (new $successful
                                   (new $result
                                    (seq
                                     (xor
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (call -relay- ("op" "string_to_b58") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o"] k)
                                          (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                         )
                                         (par
                                          (fold nodes n-0
                                           (par
                                            (seq
                                             (xor
                                              (xor
                                               (seq
                                                (seq
                                                 (call n-0 ("peer" "timestamp_sec") [] t)
                                                 (call n-0 ("registry" "get_records") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o" t] get_result)
                                                )
                                                (xor
                                                 (match get_result.$.success! true
                                                  (seq
                                                   (ap get_result.$.result! $records)
                                                   (ap true $successful)
                                                  )
                                                 )
                                                 (ap get_result.$.error! $error-0)
                                                )
                                               )
                                               (call n-0 ("op" "noop") [])
                                              )
                                              (seq
                                               (call -relay- ("op" "noop") [])
                                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                              )
                                             )
                                             (call -relay- ("op" "noop") [])
                                            )
                                            (next n-0)
                                           )
                                           (never)
                                          )
                                          (null)
                                         )
                                        )
                                        (new $status-0
                                         (new $result-0
                                          (seq
                                           (seq
                                            (seq
                                             (par
                                              (seq
                                               (seq
                                                (call -relay- ("math" "sub") [5 1] sub)
                                                (new $successful_test
                                                 (seq
                                                  (fold $successful s
                                                   (seq
                                                    (seq
                                                     (seq
                                                      (call -relay- ("math" "add") [sub 1] incr_idx)
                                                      (ap s $successful_test)
                                                     )
                                                     (canon -relay- $successful_test  #successful_iter_canon)
                                                    )
                                                    (xor
                                                     (match #successful_iter_canon.length incr_idx
                                                      (null)
                                                     )
                                                     (next s)
                                                    )
                                                   )
                                                   (never)
                                                  )
                                                  (canon -relay- $successful_test  #successful_result_canon)
                                                 )
                                                )
                                               )
                                               (ap "ok" $status-0)
                                              )
                                              (call -relay- ("peer" "timeout") [6000 "timeout"] $status-0)
                                             )
                                             (new $status-0_test
                                              (seq
                                               (fold $status-0 s
                                                (seq
                                                 (seq
                                                  (seq
                                                   (call -relay- ("math" "add") [0 1] incr_idx)
                                                   (ap s $status-0_test)
                                                  )
                                                  (canon -relay- $status-0_test  #status-0_iter_canon)
                                                 )
                                                 (xor
                                                  (match #status-0_iter_canon.length incr_idx
                                                   (null)
                                                  )
                                                  (next s)
                                                 )
                                                )
                                                (never)
                                               )
                                               (canon -relay- $status-0_test  #status-0_result_canon)
                                              )
                                             )
                                            )
                                            (xor
                                             (match #status-0_result_canon.$.[0]! "ok"
                                              (ap true $result-0)
                                             )
                                             (ap false $result-0)
                                            )
                                           )
                                           (canon -relay- $result-0  #result-fix-0)
                                          )
                                         )
                                        )
                                       )
                                       (xor
                                        (match #result-fix-0.$.[0]! false
                                         (ap "timeout exceeded" $error-0)
                                        )
                                        (seq
                                         (seq
                                          (canon -relay- $records  #records_canon)
                                          (call -relay- ("registry" "merge") [#records_canon] merged)
                                         )
                                         (xor
                                          (match merged.$.success! false
                                           (ap merged.$.error! $error-0)
                                          )
                                          (ap merged.$.result! $result)
                                         )
                                        )
                                       )
                                      )
                                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                     )
                                     (canon %init_peer_id% $result  #result-fix)
                                    )
                                   )
                                  )
                                 )
                                 (canon %init_peer_id% $error-0  #push-to-stream-20)
                                )
                                (ap #push-to-stream-20 $error)
                               )
                               (canon %init_peer_id% $error  #push-to-stream-18)
                              )
                              (ap #push-to-stream-18 $errs_get)
                             )
                             (xor
                              (mismatch #result-fix []
                               (xor
                                (seq
                                 (seq
                                  (seq
                                   (seq
                                    (seq
                                     (ap #result-fix.$.[0]! result-fix_flatten)
                                     (fold result-fix_flatten r-0
                                      (seq
                                       (xor
                                        (match r-0.$.metadata.value! "role=service"
                                         (ap r-0 $services)
                                        )
                                        (call %init_peer_id% ("op" "noop") [])
                                       )
                                       (next r-0)
                                      )
                                     )
                                    )
                                    (ap #result-fix.$.[0]! result-fix_flatten-0)
                                   )
                                   (fold result-fix_flatten-0 r-1
                                    (seq
                                     (xor
                                      (match r-1.$.metadata.value! "role=healthcheckstorage"
                                       (ap r-1 $storages)
                                      )
                                      (call %init_peer_id% ("op" "noop") [])
                                     )
                                     (next r-1)
                                    )
                                   )
                                  )
                                  (canon %init_peer_id% $services  #services_canon)
                                 )
                                 (fold #services_canon s-0
                                  (seq
                                   (new $status
                                    (seq
                                     (seq
                                      (call -relay- ("op" "noop") [])
                                      (fold s-0.$.metadata.relay_id! -via-peer-
                                       (seq
                                        (call -via-peer- ("op" "noop") [])
                                        (next -via-peer-)
                                       )
                                      )
                                     )
                                     (xor
                                      (seq
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (call s-0.$.metadata.peer_id! (s-0.$.metadata.service_id.[0]! "ok") [] ok)
                                           (xor
                                            (match ok true
                                             (ap "OK" $status)
                                            )
                                            (ap "BAD" $status)
                                           )
                                          )
                                          (canon s-0.$.metadata.peer_id! $storages  #storages_canon)
                                         )
                                         (fold #storages_canon storage-0
                                          (seq
                                           (seq
                                            (seq
                                             (fold s-0.$.metadata.relay_id! -via-peer-
                                              (seq
                                               (call -via-peer- ("op" "noop") [])
                                               (next -via-peer-)
                                              )
                                             )
                                             (fold storage-0.$.metadata.relay_id! -via-peer-
                                              (seq
                                               (call -via-peer- ("op" "noop") [])
                                               (next -via-peer-)
                                              )
                                             )
                                            )
                                            (xor
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (seq
                                                   (seq
                                                    (call storage-0.$.metadata.peer_id! ("peer" "timestamp_ms") [] ts)
                                                    (new $status_test
                                                     (seq
                                                      (fold $status s
                                                       (seq
                                                        (seq
                                                         (seq
                                                          (call storage-0.$.metadata.peer_id! ("math" "add") [0 1] incr_idx)
                                                          (ap s $status_test)
                                                         )
                                                         (canon storage-0.$.metadata.peer_id! $status_test  #status_iter_canon)
                                                        )
                                                        (xor
                                                         (match #status_iter_canon.length incr_idx
                                                          (null)
                                                         )
                                                         (next s)
                                                        )
                                                       )
                                                       (never)
                                                      )
                                                      (canon storage-0.$.metadata.peer_id! $status_test  #status_result_canon)
                                                     )
                                                    )
                                                   )
                                                   (ap #status_result_canon.$.[0]! status_result_canon_flatten)
                                                  )
                                                  (call storage-0.$.metadata.peer_id! (storage-0.$.metadata.service_id.[0]! "store_status") [status_result_canon_flatten s-0.$.metadata.peer_id! s-0.$.metadata.service_id.[0]! ts])
                                                 )
                                                 (new $status_test-0
                                                  (seq
                                                   (fold $status s
                                                    (seq
                                                     (seq
                                                      (seq
                                                       (call storage-0.$.metadata.peer_id! ("math" "add") [0 1] incr_idx)
                                                       (ap s $status_test-0)
                                                      )
                                                      (canon storage-0.$.metadata.peer_id! $status_test-0  #status_iter_canon)
                                                     )
                                                     (xor
                                                      (match #status_iter_canon.length incr_idx
                                                       (null)
                                                      )
                                                      (next s)
                                                     )
                                                    )
                                                    (never)
                                                   )
                                                   (canon storage-0.$.metadata.peer_id! $status_test-0  #status_result_canon-0)
                                                  )
                                                 )
                                                )
                                                (ap #status_result_canon-0.$.[0]! $stored)
                                               )
                                               (fold storage-0.$.metadata.relay_id! -via-peer-
                                                (seq
                                                 (next -via-peer-)
                                                 (call -via-peer- ("op" "noop") [])
                                                )
                                               )
                                              )
                                              (fold s-0.$.metadata.relay_id! -via-peer-
                                               (seq
                                                (next -via-peer-)
                                                (call -via-peer- ("op" "noop") [])
                                               )
                                              )
                                             )
                                             (seq
                                              (seq
                                               (seq
                                                (seq
                                                 (seq
                                                  (fold storage-0.$.metadata.relay_id! -via-peer-
                                                   (seq
                                                    (call -via-peer- ("op" "noop") [])
                                                    (next -via-peer-)
                                                   )
                                                  )
                                                  (call -relay- ("op" "noop") [])
                                                 )
                                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                                )
                                                (call -relay- ("op" "noop") [])
                                               )
                                               (fold storage-0.$.metadata.relay_id! -via-peer-
                                                (seq
                                                 (next -via-peer-)
                                                 (call -via-peer- ("op" "noop") [])
                                                )
                                               )
                                              )
                                              (fold s-0.$.metadata.relay_id! -via-peer-
                                               (seq
                                                (next -via-peer-)
                                                (call -via-peer- ("op" "noop") [])
                                               )
                                              )
                                             )
                                            )
                                           )
                                           (next storage-0)
                                          )
                                         )
                                        )
                                        (fold s-0.$.metadata.relay_id! -via-peer-
                                         (seq
                                          (next -via-peer-)
                                          (call -via-peer- ("op" "noop") [])
                                         )
                                        )
                                       )
                                       (call -relay- ("op" "noop") [])
                                      )
                                      (seq
                                       (seq
                                        (fold s-0.$.metadata.relay_id! -via-peer-
                                         (seq
                                          (call -via-peer- ("op" "noop") [])
                                          (next -via-peer-)
                                         )
                                        )
                                        (call -relay- ("op" "noop") [])
                                       )
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                      )
                                     )
                                    )
                                   )
                                   (next s-0)
                                  )
                                 )
                                )
                                (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                               )
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                            )
                           )
                          )
                          (canon %init_peer_id% $stored  #stored-fix)
                         )
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#stored-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 7])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'check_examples_seq',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {},
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function check_examples(config?: { ttl?: number }): Promise<void>;

export function check_examples(peer: FluencePeer, config?: { ttl?: number }): Promise<void>;

export function check_examples(...args: any) {
    let script = `
                    (xor
                     (seq
                      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                      (new $storages
                       (new $services
                        (new $errs_get
                         (seq
                          (seq
                           (seq
                            (seq
                             (seq
                              (new $records
                               (new $successful
                                (new $result
                                 (seq
                                  (xor
                                   (seq
                                    (seq
                                     (seq
                                      (seq
                                       (call -relay- ("op" "string_to_b58") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o"] k)
                                       (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                      )
                                      (par
                                       (fold nodes n-0
                                        (par
                                         (seq
                                          (xor
                                           (xor
                                            (seq
                                             (seq
                                              (call n-0 ("peer" "timestamp_sec") [] t)
                                              (call n-0 ("registry" "get_records") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o" t] get_result)
                                             )
                                             (xor
                                              (match get_result.$.success! true
                                               (seq
                                                (ap get_result.$.result! $records)
                                                (ap true $successful)
                                               )
                                              )
                                              (ap get_result.$.error! $error-0)
                                             )
                                            )
                                            (call n-0 ("op" "noop") [])
                                           )
                                           (seq
                                            (call -relay- ("op" "noop") [])
                                            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                           )
                                          )
                                          (call -relay- ("op" "noop") [])
                                         )
                                         (next n-0)
                                        )
                                        (never)
                                       )
                                       (null)
                                      )
                                     )
                                     (new $status-0
                                      (new $result-0
                                       (seq
                                        (seq
                                         (seq
                                          (par
                                           (seq
                                            (seq
                                             (call -relay- ("math" "sub") [5 1] sub)
                                             (new $successful_test
                                              (seq
                                               (fold $successful s
                                                (seq
                                                 (seq
                                                  (seq
                                                   (call -relay- ("math" "add") [sub 1] incr_idx)
                                                   (ap s $successful_test)
                                                  )
                                                  (canon -relay- $successful_test  #successful_iter_canon)
                                                 )
                                                 (xor
                                                  (match #successful_iter_canon.length incr_idx
                                                   (null)
                                                  )
                                                  (next s)
                                                 )
                                                )
                                                (never)
                                               )
                                               (canon -relay- $successful_test  #successful_result_canon)
                                              )
                                             )
                                            )
                                            (ap "ok" $status-0)
                                           )
                                           (call -relay- ("peer" "timeout") [6000 "timeout"] $status-0)
                                          )
                                          (new $status-0_test
                                           (seq
                                            (fold $status-0 s
                                             (seq
                                              (seq
                                               (seq
                                                (call -relay- ("math" "add") [0 1] incr_idx)
                                                (ap s $status-0_test)
                                               )
                                               (canon -relay- $status-0_test  #status-0_iter_canon)
                                              )
                                              (xor
                                               (match #status-0_iter_canon.length incr_idx
                                                (null)
                                               )
                                               (next s)
                                              )
                                             )
                                             (never)
                                            )
                                            (canon -relay- $status-0_test  #status-0_result_canon)
                                           )
                                          )
                                         )
                                         (xor
                                          (match #status-0_result_canon.$.[0]! "ok"
                                           (ap true $result-0)
                                          )
                                          (ap false $result-0)
                                         )
                                        )
                                        (canon -relay- $result-0  #result-fix-0)
                                       )
                                      )
                                     )
                                    )
                                    (xor
                                     (match #result-fix-0.$.[0]! false
                                      (ap "timeout exceeded" $error-0)
                                     )
                                     (seq
                                      (seq
                                       (canon -relay- $records  #records_canon)
                                       (call -relay- ("registry" "merge") [#records_canon] merged)
                                      )
                                      (xor
                                       (match merged.$.success! false
                                        (ap merged.$.error! $error-0)
                                       )
                                       (ap merged.$.result! $result)
                                      )
                                     )
                                    )
                                   )
                                   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                  )
                                  (canon %init_peer_id% $result  #result-fix)
                                 )
                                )
                               )
                              )
                              (canon %init_peer_id% $error-0  #push-to-stream-15)
                             )
                             (ap #push-to-stream-15 $error)
                            )
                            (canon %init_peer_id% $error  #push-to-stream-13)
                           )
                           (ap #push-to-stream-13 $errs_get)
                          )
                          (xor
                           (mismatch #result-fix []
                            (xor
                             (seq
                              (seq
                               (seq
                                (seq
                                 (ap #result-fix.$.[0]! result-fix_flatten)
                                 (fold result-fix_flatten r-0
                                  (seq
                                   (xor
                                    (match r-0.$.metadata.value! "role=service"
                                     (ap r-0 $services)
                                    )
                                    (call %init_peer_id% ("op" "noop") [])
                                   )
                                   (next r-0)
                                  )
                                 )
                                )
                                (ap #result-fix.$.[0]! result-fix_flatten-0)
                               )
                               (fold result-fix_flatten-0 r-1
                                (seq
                                 (xor
                                  (match r-1.$.metadata.value! "role=healthcheckstorage"
                                   (ap r-1 $storages)
                                  )
                                  (call %init_peer_id% ("op" "noop") [])
                                 )
                                 (next r-1)
                                )
                               )
                              )
                              (par
                               (seq
                                (canon %init_peer_id% $services  #services_canon)
                                (fold #services_canon s-0
                                 (par
                                  (new $status
                                   (seq
                                    (seq
                                     (call -relay- ("op" "noop") [])
                                     (fold s-0.$.metadata.relay_id! -via-peer-
                                      (seq
                                       (call -via-peer- ("op" "noop") [])
                                       (next -via-peer-)
                                      )
                                     )
                                    )
                                    (xor
                                     (seq
                                      (seq
                                       (call s-0.$.metadata.peer_id! (s-0.$.metadata.service_id.[0]! "ok") [] ok)
                                       (xor
                                        (match ok true
                                         (ap "OK" $status)
                                        )
                                        (ap "BAD" $status)
                                       )
                                      )
                                      (par
                                       (seq
                                        (canon s-0.$.metadata.peer_id! $storages  #storages_canon)
                                        (fold #storages_canon storage-0
                                         (par
                                          (seq
                                           (seq
                                            (fold s-0.$.metadata.relay_id! -via-peer-
                                             (seq
                                              (call -via-peer- ("op" "noop") [])
                                              (next -via-peer-)
                                             )
                                            )
                                            (fold storage-0.$.metadata.relay_id! -via-peer-
                                             (seq
                                              (call -via-peer- ("op" "noop") [])
                                              (next -via-peer-)
                                             )
                                            )
                                           )
                                           (xor
                                            (seq
                                             (seq
                                              (seq
                                               (call storage-0.$.metadata.peer_id! ("peer" "timestamp_ms") [] ts)
                                               (new $status_test
                                                (seq
                                                 (fold $status s
                                                  (seq
                                                   (seq
                                                    (seq
                                                     (call storage-0.$.metadata.peer_id! ("math" "add") [0 1] incr_idx)
                                                     (ap s $status_test)
                                                    )
                                                    (canon storage-0.$.metadata.peer_id! $status_test  #status_iter_canon)
                                                   )
                                                   (xor
                                                    (match #status_iter_canon.length incr_idx
                                                     (null)
                                                    )
                                                    (next s)
                                                   )
                                                  )
                                                  (never)
                                                 )
                                                 (canon storage-0.$.metadata.peer_id! $status_test  #status_result_canon)
                                                )
                                               )
                                              )
                                              (ap #status_result_canon.$.[0]! status_result_canon_flatten)
                                             )
                                             (call storage-0.$.metadata.peer_id! (storage-0.$.metadata.service_id.[0]! "store_status") [status_result_canon_flatten s-0.$.metadata.peer_id! s-0.$.metadata.service_id.[0]! ts])
                                            )
                                            (seq
                                             (seq
                                              (fold storage-0.$.metadata.relay_id! -via-peer-
                                               (seq
                                                (call -via-peer- ("op" "noop") [])
                                                (next -via-peer-)
                                               )
                                              )
                                              (call -relay- ("op" "noop") [])
                                             )
                                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                            )
                                           )
                                          )
                                          (next storage-0)
                                         )
                                         (never)
                                        )
                                       )
                                       (null)
                                      )
                                     )
                                     (seq
                                      (seq
                                       (fold s-0.$.metadata.relay_id! -via-peer-
                                        (seq
                                         (call -via-peer- ("op" "noop") [])
                                         (next -via-peer-)
                                        )
                                       )
                                       (call -relay- ("op" "noop") [])
                                      )
                                      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                                     )
                                    )
                                   )
                                  )
                                  (next s-0)
                                 )
                                 (never)
                                )
                               )
                               (null)
                              )
                             )
                             (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                            )
                           )
                           (call %init_peer_id% ("op" "noop") [])
                          )
                         )
                        )
                       )
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'check_examples',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {},
                },
                codomain: {
                    tag: 'nil',
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
