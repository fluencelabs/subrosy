/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.7-358
 *
 */
import { FluencePeer } from '@fluencelabs/fluence';
import type { CallParams } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';
import { callFunction, registerService } from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';

// Services

// Functions

export function contains_peer_id(
    set: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    pid: string,
    config?: { ttl?: number },
): Promise<boolean>;

export function contains_peer_id(
    peer: FluencePeer,
    set: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    pid: string,
    config?: { ttl?: number },
): Promise<boolean>;

export function contains_peer_id(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "set") [] set)
                        )
                        (call %init_peer_id% ("getDataSrv" "pid") [] pid)
                       )
                       (new $contains
                        (seq
                         (seq
                          (fold set r-0
                           (seq
                            (xor
                             (match r-0.$.metadata.peer_id! pid
                              (ap true $contains)
                             )
                             (call %init_peer_id% ("op" "noop") [])
                            )
                            (next r-0)
                           )
                          )
                          (xor
                           (seq
                            (canon %init_peer_id% $contains  #contains_canon)
                            (match #contains_canon []
                             (ap false $contains)
                            )
                           )
                           (call %init_peer_id% ("op" "noop") [])
                          )
                         )
                         (canon %init_peer_id% $contains  #contains-fix)
                        )
                       )
                      )
                      (xor
                       (seq
                        (ap #contains-fix.$.[0]! contains-fix_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [contains-fix_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'contains_peer_id',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        set: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                        pid: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'bool',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export type List_recordsResult = [string[][], string[]];
export function list_records(subnet: string, config?: { ttl?: number }): Promise<List_recordsResult>;

export function list_records(peer: FluencePeer, subnet: string, config?: { ttl?: number }): Promise<List_recordsResult>;

export function list_records(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "subnet") [] subnet)
                       )
                       (new $error_resolve
                        (seq
                         (new $minified_records
                          (seq
                           (seq
                            (seq
                             (seq
                              (seq
                               (seq
                                (new $records
                                 (new $successful
                                  (new $result
                                   (seq
                                    (xor
                                     (seq
                                      (seq
                                       (seq
                                        (seq
                                         (call -relay- ("op" "string_to_b58") [subnet] k)
                                         (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                        )
                                        (par
                                         (fold nodes n-0
                                          (par
                                           (seq
                                            (xor
                                             (xor
                                              (seq
                                               (seq
                                                (call n-0 ("peer" "timestamp_sec") [] t)
                                                (call n-0 ("registry" "get_records") [subnet t] get_result)
                                               )
                                               (xor
                                                (match get_result.$.success! true
                                                 (seq
                                                  (ap get_result.$.result! $records)
                                                  (ap true $successful)
                                                 )
                                                )
                                                (ap get_result.$.error! $error-0)
                                               )
                                              )
                                              (call n-0 ("op" "noop") [])
                                             )
                                             (seq
                                              (call -relay- ("op" "noop") [])
                                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                             )
                                            )
                                            (call -relay- ("op" "noop") [])
                                           )
                                           (next n-0)
                                          )
                                          (never)
                                         )
                                         (null)
                                        )
                                       )
                                       (new $status
                                        (new $result-0
                                         (seq
                                          (seq
                                           (seq
                                            (par
                                             (seq
                                              (seq
                                               (call -relay- ("math" "sub") [3 1] sub)
                                               (new $successful_test
                                                (seq
                                                 (fold $successful s
                                                  (seq
                                                   (seq
                                                    (seq
                                                     (call -relay- ("math" "add") [sub 1] incr_idx)
                                                     (ap s $successful_test)
                                                    )
                                                    (canon -relay- $successful_test  #successful_iter_canon)
                                                   )
                                                   (xor
                                                    (match #successful_iter_canon.length incr_idx
                                                     (null)
                                                    )
                                                    (next s)
                                                   )
                                                  )
                                                  (never)
                                                 )
                                                 (canon -relay- $successful_test  #successful_result_canon)
                                                )
                                               )
                                              )
                                              (ap "ok" $status)
                                             )
                                             (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                            )
                                            (new $status_test
                                             (seq
                                              (fold $status s
                                               (seq
                                                (seq
                                                 (seq
                                                  (call -relay- ("math" "add") [0 1] incr_idx)
                                                  (ap s $status_test)
                                                 )
                                                 (canon -relay- $status_test  #status_iter_canon)
                                                )
                                                (xor
                                                 (match #status_iter_canon.length incr_idx
                                                  (null)
                                                 )
                                                 (next s)
                                                )
                                               )
                                               (never)
                                              )
                                              (canon -relay- $status_test  #status_result_canon)
                                             )
                                            )
                                           )
                                           (xor
                                            (match #status_result_canon.$.[0]! "ok"
                                             (ap true $result-0)
                                            )
                                            (ap false $result-0)
                                           )
                                          )
                                          (canon -relay- $result-0  #result-fix-0)
                                         )
                                        )
                                       )
                                      )
                                      (xor
                                       (match #result-fix-0.$.[0]! false
                                        (ap "timeout exceeded" $error-0)
                                       )
                                       (seq
                                        (seq
                                         (canon -relay- $records  #records_canon)
                                         (call -relay- ("registry" "merge") [#records_canon] merged)
                                        )
                                        (xor
                                         (match merged.$.success! false
                                          (ap merged.$.error! $error-0)
                                         )
                                         (ap merged.$.result! $result)
                                        )
                                       )
                                      )
                                     )
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                                    )
                                    (canon %init_peer_id% $result  #result-fix)
                                   )
                                  )
                                 )
                                )
                                (canon %init_peer_id% $error-0  #push-to-stream-21)
                               )
                               (ap #push-to-stream-21 $error)
                              )
                              (canon %init_peer_id% $error  #push-to-stream-19)
                             )
                             (ap #push-to-stream-19 $error_resolve)
                            )
                            (xor
                             (mismatch #result-fix []
                              (xor
                               (seq
                                (ap #result-fix.$.[0]! result-fix_flatten)
                                (fold result-fix_flatten r-0
                                 (seq
                                  (xor
                                   (mismatch r-0.$.metadata.service_id! []
                                    (xor
                                     (seq
                                      (new $array-inline
                                       (seq
                                        (seq
                                         (seq
                                          (seq
                                           (ap r-0.$.metadata.peer_id! $array-inline)
                                           (ap r-0.$.metadata.value! $array-inline)
                                          )
                                          (ap r-0.$.metadata.service_id.[0]! $array-inline)
                                         )
                                         (ap r-0.$.metadata.issued_by! $array-inline)
                                        )
                                        (canon %init_peer_id% $array-inline  #array-inline-0)
                                       )
                                      )
                                      (ap #array-inline-0 $minified_records)
                                     )
                                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                                    )
                                   )
                                   (seq
                                    (new $array-inline-1
                                     (seq
                                      (seq
                                       (seq
                                        (ap r-0.$.metadata.peer_id! $array-inline-1)
                                        (ap r-0.$.metadata.value! $array-inline-1)
                                       )
                                       (ap r-0.$.metadata.issued_by! $array-inline-1)
                                      )
                                      (canon %init_peer_id% $array-inline-1  #array-inline-1-0)
                                     )
                                    )
                                    (ap #array-inline-1-0 $minified_records)
                                   )
                                  )
                                  (next r-0)
                                 )
                                )
                               )
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                              )
                             )
                             (call %init_peer_id% ("op" "noop") [])
                            )
                           )
                           (canon %init_peer_id% $minified_records  #minified_records-fix)
                          )
                         )
                         (canon %init_peer_id% $error_resolve  #error_resolve-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#minified_records-fix #error_resolve-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'list_records',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        subnet: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'string',
                                },
                            },
                        },
                        {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export type Group_by_cidResult = [string[], string[][]];
export function group_by_cid(
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    config?: { ttl?: number },
): Promise<Group_by_cidResult>;

export function group_by_cid(
    peer: FluencePeer,
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    config?: { ttl?: number },
): Promise<Group_by_cidResult>;

export function group_by_cid(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "records") [] records)
                       )
                       (new $ipfs_hosts
                        (seq
                         (new $cids
                          (seq
                           (fold records r-0
                            (seq
                             (xor
                              (seq
                               (new $contains
                                (seq
                                 (seq
                                  (seq
                                   (canon %init_peer_id% $cids  #cids_canon)
                                   (fold #cids_canon e-0
                                    (seq
                                     (xor
                                      (match e-0 r-0.$.metadata.service_id.[0]!
                                       (ap true $contains)
                                      )
                                      (call %init_peer_id% ("op" "noop") [])
                                     )
                                     (next e-0)
                                    )
                                   )
                                  )
                                  (xor
                                   (seq
                                    (canon %init_peer_id% $contains  #contains_canon)
                                    (match #contains_canon []
                                     (ap false $contains)
                                    )
                                   )
                                   (call %init_peer_id% ("op" "noop") [])
                                  )
                                 )
                                 (canon %init_peer_id% $contains  #contains-fix)
                                )
                               )
                               (match #contains-fix.$.[0]! false
                                (xor
                                 (seq
                                  (seq
                                   (new $filtered
                                    (seq
                                     (fold records r-1-0
                                      (seq
                                       (xor
                                        (match r-1-0.$.metadata.service_id.[0]! r-0.$.metadata.service_id.[0]!
                                         (ap r-1-0.$.metadata.peer_id! $filtered)
                                        )
                                        (call %init_peer_id% ("op" "noop") [])
                                       )
                                       (next r-1-0)
                                      )
                                     )
                                     (canon %init_peer_id% $filtered  #filtered-fix)
                                    )
                                   )
                                   (ap r-0.$.metadata.service_id.[0]! $cids)
                                  )
                                  (ap #filtered-fix $ipfs_hosts)
                                 )
                                 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                )
                               )
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                             (next r-0)
                            )
                           )
                           (canon %init_peer_id% $cids  #cids-fix)
                          )
                         )
                         (canon %init_peer_id% $ipfs_hosts  #ipfs_hosts-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#cids-fix #ipfs_hosts-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'group_by_cid',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        records: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                        {
                            tag: 'array',
                            type: {
                                tag: 'array',
                                type: {
                                    tag: 'scalar',
                                    name: 'string',
                                },
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function hosts_by_cid(
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    cid: string,
    config?: { ttl?: number },
): Promise<string[]>;

export function hosts_by_cid(
    peer: FluencePeer,
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    cid: string,
    config?: { ttl?: number },
): Promise<string[]>;

export function hosts_by_cid(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "records") [] records)
                        )
                        (call %init_peer_id% ("getDataSrv" "cid") [] cid)
                       )
                       (new $filtered
                        (seq
                         (fold records r-0
                          (seq
                           (xor
                            (match r-0.$.metadata.service_id.[0]! cid
                             (ap r-0.$.metadata.peer_id! $filtered)
                            )
                            (call %init_peer_id% ("op" "noop") [])
                           )
                           (next r-0)
                          )
                         )
                         (canon %init_peer_id% $filtered  #filtered-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#filtered-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'hosts_by_cid',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        records: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                        cid: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function find_records(
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    key: string,
    config?: { ttl?: number },
): Promise<
    {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[]
>;

export function find_records(
    peer: FluencePeer,
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    key: string,
    config?: { ttl?: number },
): Promise<
    {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[]
>;

export function find_records(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "records") [] records)
                        )
                        (call %init_peer_id% ("getDataSrv" "key") [] key)
                       )
                       (fold records r-0
                        (seq
                         (xor
                          (match r-0.$.metadata.value! key
                           (ap r-0 $result)
                          )
                          (call %init_peer_id% ("op" "noop") [])
                         )
                         (next r-0)
                        )
                       )
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $result  #result_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#result_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'find_records',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        records: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                        key: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function set_insert(set: string[], elem: string, config?: { ttl?: number }): Promise<boolean>;

export function set_insert(peer: FluencePeer, set: string[], elem: string, config?: { ttl?: number }): Promise<boolean>;

export function set_insert(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "set") [] set-iter)
                          )
                          (fold set-iter set-item-0
                           (seq
                            (ap set-item-0 $set)
                            (next set-item-0)
                           )
                          )
                         )
                         (call %init_peer_id% ("getDataSrv" "elem") [] elem)
                        )
                        (new $contains
                         (seq
                          (seq
                           (seq
                            (canon %init_peer_id% $set  #set_canon)
                            (fold #set_canon e-0
                             (seq
                              (xor
                               (match e-0 elem
                                (ap true $contains)
                               )
                               (call %init_peer_id% ("op" "noop") [])
                              )
                              (next e-0)
                             )
                            )
                           )
                           (xor
                            (seq
                             (canon %init_peer_id% $contains  #contains_canon)
                             (match #contains_canon []
                              (ap false $contains)
                             )
                            )
                            (call %init_peer_id% ("op" "noop") [])
                           )
                          )
                          (canon %init_peer_id% $contains  #contains-fix)
                         )
                        )
                       )
                       (xor
                        (match #contains-fix.$.[0]! false
                         (ap elem $set)
                        )
                        (call %init_peer_id% ("op" "noop") [])
                       )
                      )
                      (xor
                       (seq
                        (ap #contains-fix.$.[0]! contains-fix_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [contains-fix_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'set_insert',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        set: {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                        elem: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'bool',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export type Get_recordsResult = [
    (
        | {
              metadata: {
                  issued_by: string;
                  issuer_signature: number[];
                  key_id: string;
                  peer_id: string;
                  relay_id: string[];
                  service_id: string[];
                  solution: number[];
                  timestamp_issued: number;
                  value: string;
              };
              signature: number[];
              timestamp_created: number;
          }[]
        | null
    ),
    string[],
];
export function get_records(
    resource_id: string,
    consistency_level: number,
    config?: { ttl?: number },
): Promise<Get_recordsResult>;

export function get_records(
    peer: FluencePeer,
    resource_id: string,
    consistency_level: number,
    config?: { ttl?: number },
): Promise<Get_recordsResult>;

export function get_records(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (seq
                           (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                           (call %init_peer_id% ("getDataSrv" "resource_id") [] resource_id)
                          )
                          (call %init_peer_id% ("getDataSrv" "consistency_level") [] consistency_level)
                         )
                         (new $records
                          (new $successful
                           (new $result
                            (seq
                             (xor
                              (seq
                               (seq
                                (seq
                                 (seq
                                  (call -relay- ("op" "string_to_b58") [resource_id] k)
                                  (call -relay- ("kad" "neighborhood") [k [] []] nodes)
                                 )
                                 (par
                                  (fold nodes n-0
                                   (par
                                    (seq
                                     (xor
                                      (xor
                                       (seq
                                        (seq
                                         (call n-0 ("peer" "timestamp_sec") [] t)
                                         (call n-0 ("registry" "get_records") [resource_id t] get_result)
                                        )
                                        (xor
                                         (match get_result.$.success! true
                                          (seq
                                           (ap get_result.$.result! $records)
                                           (ap true $successful)
                                          )
                                         )
                                         (ap get_result.$.error! $error-0)
                                        )
                                       )
                                       (call n-0 ("op" "noop") [])
                                      )
                                      (seq
                                       (call -relay- ("op" "noop") [])
                                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                                      )
                                     )
                                     (call -relay- ("op" "noop") [])
                                    )
                                    (next n-0)
                                   )
                                   (never)
                                  )
                                  (null)
                                 )
                                )
                                (new $status
                                 (new $result-0
                                  (seq
                                   (seq
                                    (seq
                                     (par
                                      (seq
                                       (seq
                                        (call -relay- ("math" "sub") [consistency_level 1] sub)
                                        (new $successful_test
                                         (seq
                                          (fold $successful s
                                           (seq
                                            (seq
                                             (seq
                                              (call -relay- ("math" "add") [sub 1] incr_idx)
                                              (ap s $successful_test)
                                             )
                                             (canon -relay- $successful_test  #successful_iter_canon)
                                            )
                                            (xor
                                             (match #successful_iter_canon.length incr_idx
                                              (null)
                                             )
                                             (next s)
                                            )
                                           )
                                           (never)
                                          )
                                          (canon -relay- $successful_test  #successful_result_canon)
                                         )
                                        )
                                       )
                                       (ap "ok" $status)
                                      )
                                      (call -relay- ("peer" "timeout") [6000 "timeout"] $status)
                                     )
                                     (new $status_test
                                      (seq
                                       (fold $status s
                                        (seq
                                         (seq
                                          (seq
                                           (call -relay- ("math" "add") [0 1] incr_idx)
                                           (ap s $status_test)
                                          )
                                          (canon -relay- $status_test  #status_iter_canon)
                                         )
                                         (xor
                                          (match #status_iter_canon.length incr_idx
                                           (null)
                                          )
                                          (next s)
                                         )
                                        )
                                        (never)
                                       )
                                       (canon -relay- $status_test  #status_result_canon)
                                      )
                                     )
                                    )
                                    (xor
                                     (match #status_result_canon.$.[0]! "ok"
                                      (ap true $result-0)
                                     )
                                     (ap false $result-0)
                                    )
                                   )
                                   (canon -relay- $result-0  #result-fix-0)
                                  )
                                 )
                                )
                               )
                               (xor
                                (match #result-fix-0.$.[0]! false
                                 (ap "timeout exceeded" $error-0)
                                )
                                (seq
                                 (seq
                                  (canon -relay- $records  #records_canon)
                                  (call -relay- ("registry" "merge") [#records_canon] merged)
                                 )
                                 (xor
                                  (match merged.$.success! false
                                   (ap merged.$.error! $error-0)
                                  )
                                  (ap merged.$.result! $result)
                                 )
                                )
                               )
                              )
                              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                             )
                             (canon %init_peer_id% $result  #result-fix)
                            )
                           )
                          )
                         )
                        )
                        (canon %init_peer_id% $error-0  #push-to-stream-12)
                       )
                       (ap #push-to-stream-12 $error)
                      )
                      (xor
                       (seq
                        (canon %init_peer_id% $error  #error_canon)
                        (call %init_peer_id% ("callbackSrv" "response") [#result-fix #error_canon])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'get_records',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        resource_id: {
                            tag: 'scalar',
                            name: 'string',
                        },
                        consistency_level: {
                            tag: 'scalar',
                            name: 'i16',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'option',
                            type: {
                                tag: 'array',
                                type: {
                                    tag: 'struct',
                                    name: 'Record',
                                    fields: {
                                        metadata: {
                                            tag: 'struct',
                                            name: 'RecordMetadata',
                                            fields: {
                                                relay_id: {
                                                    tag: 'array',
                                                    type: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                },
                                                issued_by: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                                peer_id: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                                timestamp_issued: {
                                                    tag: 'scalar',
                                                    name: 'u64',
                                                },
                                                service_id: {
                                                    tag: 'array',
                                                    type: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                },
                                                value: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                                key_id: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                                solution: {
                                                    tag: 'array',
                                                    type: {
                                                        tag: 'scalar',
                                                        name: 'u8',
                                                    },
                                                },
                                                issuer_signature: {
                                                    tag: 'array',
                                                    type: {
                                                        tag: 'scalar',
                                                        name: 'u8',
                                                    },
                                                },
                                            },
                                        },
                                        signature: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'u8',
                                            },
                                        },
                                        timestamp_created: {
                                            tag: 'scalar',
                                            name: 'u64',
                                        },
                                    },
                                },
                            },
                        },
                        {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function script_records(
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    config?: { ttl?: number },
): Promise<
    {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[]
>;

export function script_records(
    peer: FluencePeer,
    records: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    config?: { ttl?: number },
): Promise<
    {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[]
>;

export function script_records(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call %init_peer_id% ("getDataSrv" "records") [] records)
                       )
                       (new $result
                        (seq
                         (fold records r-0
                          (seq
                           (xor
                            (match r-0.$.metadata.value! "role=ipfs_healthcheck_script"
                             (ap r-0 $result)
                            )
                            (call %init_peer_id% ("op" "noop") [])
                           )
                           (next r-0)
                          )
                         )
                         (canon %init_peer_id% $result  #result-fix)
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [#result-fix])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'script_records',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        records: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export function contains(set: string[], elem: string, config?: { ttl?: number }): Promise<boolean>;

export function contains(peer: FluencePeer, set: string[], elem: string, config?: { ttl?: number }): Promise<boolean>;

export function contains(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (seq
                          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                          (call %init_peer_id% ("getDataSrv" "set") [] set-iter)
                         )
                         (fold set-iter set-item-0
                          (seq
                           (ap set-item-0 $set)
                           (next set-item-0)
                          )
                         )
                        )
                        (call %init_peer_id% ("getDataSrv" "elem") [] elem)
                       )
                       (new $contains
                        (seq
                         (seq
                          (seq
                           (canon %init_peer_id% $set  #set_canon)
                           (fold #set_canon e-0
                            (seq
                             (xor
                              (match e-0 elem
                               (ap true $contains)
                              )
                              (call %init_peer_id% ("op" "noop") [])
                             )
                             (next e-0)
                            )
                           )
                          )
                          (xor
                           (seq
                            (canon %init_peer_id% $contains  #contains_canon)
                            (match #contains_canon []
                             (ap false $contains)
                            )
                           )
                           (call %init_peer_id% ("op" "noop") [])
                          )
                         )
                         (canon %init_peer_id% $contains  #contains-fix)
                        )
                       )
                      )
                      (xor
                       (seq
                        (ap #contains-fix.$.[0]! contains-fix_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [contains-fix_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'contains',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        set: {
                            tag: 'array',
                            type: {
                                tag: 'scalar',
                                name: 'string',
                            },
                        },
                        elem: {
                            tag: 'scalar',
                            name: 'string',
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'bool',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}

export type Contains_recArgE = {
    metadata: {
        issued_by: string;
        issuer_signature: number[];
        key_id: string;
        peer_id: string;
        relay_id: string[];
        service_id: string[];
        solution: number[];
        timestamp_issued: number;
        value: string;
    };
    signature: number[];
    timestamp_created: number;
};

export function contains_rec(
    set: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    e: Contains_recArgE,
    f: (
        arg0: {
            metadata: {
                issued_by: string;
                issuer_signature: number[];
                key_id: string;
                peer_id: string;
                relay_id: string[];
                service_id: string[];
                solution: number[];
                timestamp_issued: number;
                value: string;
            };
            signature: number[];
            timestamp_created: number;
        },
        arg1: {
            metadata: {
                issued_by: string;
                issuer_signature: number[];
                key_id: string;
                peer_id: string;
                relay_id: string[];
                service_id: string[];
                solution: number[];
                timestamp_issued: number;
                value: string;
            };
            signature: number[];
            timestamp_created: number;
        },
        callParams: CallParams<'arg0' | 'arg1'>,
    ) => boolean | Promise<boolean>,
    config?: { ttl?: number },
): Promise<boolean>;

export function contains_rec(
    peer: FluencePeer,
    set: {
        metadata: {
            issued_by: string;
            issuer_signature: number[];
            key_id: string;
            peer_id: string;
            relay_id: string[];
            service_id: string[];
            solution: number[];
            timestamp_issued: number;
            value: string;
        };
        signature: number[];
        timestamp_created: number;
    }[],
    e: Contains_recArgE,
    f: (
        arg0: {
            metadata: {
                issued_by: string;
                issuer_signature: number[];
                key_id: string;
                peer_id: string;
                relay_id: string[];
                service_id: string[];
                solution: number[];
                timestamp_issued: number;
                value: string;
            };
            signature: number[];
            timestamp_created: number;
        },
        arg1: {
            metadata: {
                issued_by: string;
                issuer_signature: number[];
                key_id: string;
                peer_id: string;
                relay_id: string[];
                service_id: string[];
                solution: number[];
                timestamp_issued: number;
                value: string;
            };
            signature: number[];
            timestamp_created: number;
        },
        callParams: CallParams<'arg0' | 'arg1'>,
    ) => boolean | Promise<boolean>,
    config?: { ttl?: number },
): Promise<boolean>;

export function contains_rec(...args: any) {
    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "set") [] set)
                        )
                        (call %init_peer_id% ("getDataSrv" "e") [] e)
                       )
                       (new $contains
                        (seq
                         (seq
                          (fold set r-0
                           (seq
                            (xor
                             (seq
                              (xor
                               (call %init_peer_id% ("callbackSrv" "f") [r-0 e] init_call_res0)
                               (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                              )
                              (match init_call_res0 true
                               (ap true $contains)
                              )
                             )
                             (call %init_peer_id% ("op" "noop") [])
                            )
                            (next r-0)
                           )
                          )
                          (xor
                           (seq
                            (canon %init_peer_id% $contains  #contains_canon)
                            (match #contains_canon []
                             (ap false $contains)
                            )
                           )
                           (call %init_peer_id% ("op" "noop") [])
                          )
                         )
                         (canon %init_peer_id% $contains  #contains-fix)
                        )
                       )
                      )
                      (xor
                       (seq
                        (ap #contains-fix.$.[0]! contains-fix_flatten)
                        (call %init_peer_id% ("callbackSrv" "response") [contains-fix_flatten])
                       )
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `;
    return callFunction(
        args,
        {
            functionName: 'contains_rec',
            arrow: {
                tag: 'arrow',
                domain: {
                    tag: 'labeledProduct',
                    fields: {
                        set: {
                            tag: 'array',
                            type: {
                                tag: 'struct',
                                name: 'Record',
                                fields: {
                                    metadata: {
                                        tag: 'struct',
                                        name: 'RecordMetadata',
                                        fields: {
                                            relay_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            issued_by: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            peer_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            timestamp_issued: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                            service_id: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'string',
                                                },
                                            },
                                            value: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            key_id: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                            solution: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            issuer_signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                        },
                                    },
                                    signature: {
                                        tag: 'array',
                                        type: {
                                            tag: 'scalar',
                                            name: 'u8',
                                        },
                                    },
                                    timestamp_created: {
                                        tag: 'scalar',
                                        name: 'u64',
                                    },
                                },
                            },
                        },
                        e: {
                            tag: 'struct',
                            name: 'Record',
                            fields: {
                                metadata: {
                                    tag: 'struct',
                                    name: 'RecordMetadata',
                                    fields: {
                                        relay_id: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                        },
                                        issued_by: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        peer_id: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        timestamp_issued: {
                                            tag: 'scalar',
                                            name: 'u64',
                                        },
                                        service_id: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'string',
                                            },
                                        },
                                        value: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        key_id: {
                                            tag: 'scalar',
                                            name: 'string',
                                        },
                                        solution: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'u8',
                                            },
                                        },
                                        issuer_signature: {
                                            tag: 'array',
                                            type: {
                                                tag: 'scalar',
                                                name: 'u8',
                                            },
                                        },
                                    },
                                },
                                signature: {
                                    tag: 'array',
                                    type: {
                                        tag: 'scalar',
                                        name: 'u8',
                                    },
                                },
                                timestamp_created: {
                                    tag: 'scalar',
                                    name: 'u64',
                                },
                            },
                        },
                        f: {
                            tag: 'arrow',
                            domain: {
                                tag: 'unlabeledProduct',
                                items: [
                                    {
                                        tag: 'struct',
                                        name: 'Record',
                                        fields: {
                                            metadata: {
                                                tag: 'struct',
                                                name: 'RecordMetadata',
                                                fields: {
                                                    relay_id: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'string',
                                                        },
                                                    },
                                                    issued_by: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    peer_id: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    timestamp_issued: {
                                                        tag: 'scalar',
                                                        name: 'u64',
                                                    },
                                                    service_id: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'string',
                                                        },
                                                    },
                                                    value: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    key_id: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    solution: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'u8',
                                                        },
                                                    },
                                                    issuer_signature: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'u8',
                                                        },
                                                    },
                                                },
                                            },
                                            signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            timestamp_created: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                        },
                                    },
                                    {
                                        tag: 'struct',
                                        name: 'Record',
                                        fields: {
                                            metadata: {
                                                tag: 'struct',
                                                name: 'RecordMetadata',
                                                fields: {
                                                    relay_id: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'string',
                                                        },
                                                    },
                                                    issued_by: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    peer_id: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    timestamp_issued: {
                                                        tag: 'scalar',
                                                        name: 'u64',
                                                    },
                                                    service_id: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'string',
                                                        },
                                                    },
                                                    value: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    key_id: {
                                                        tag: 'scalar',
                                                        name: 'string',
                                                    },
                                                    solution: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'u8',
                                                        },
                                                    },
                                                    issuer_signature: {
                                                        tag: 'array',
                                                        type: {
                                                            tag: 'scalar',
                                                            name: 'u8',
                                                        },
                                                    },
                                                },
                                            },
                                            signature: {
                                                tag: 'array',
                                                type: {
                                                    tag: 'scalar',
                                                    name: 'u8',
                                                },
                                            },
                                            timestamp_created: {
                                                tag: 'scalar',
                                                name: 'u64',
                                            },
                                        },
                                    },
                                ],
                            },
                            codomain: {
                                tag: 'unlabeledProduct',
                                items: [
                                    {
                                        tag: 'scalar',
                                        name: 'bool',
                                    },
                                ],
                            },
                        },
                    },
                },
                codomain: {
                    tag: 'unlabeledProduct',
                    items: [
                        {
                            tag: 'scalar',
                            name: 'bool',
                        },
                    ],
                },
            },
            names: {
                relay: '-relay-',
                getDataSrv: 'getDataSrv',
                callbackSrv: 'callbackSrv',
                responseSrv: 'callbackSrv',
                responseFnName: 'response',
                errorHandlingSrv: 'errorHandlingSrv',
                errorFnName: 'error',
            },
        },
        script,
    );
}
