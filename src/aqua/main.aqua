import "@fluencelabs/registry/resources-api.aqua"
import "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-ipfs/ipfs-api.aqua"
import "utils.aqua"
    

func find_blueprint(name: string) -> ?Blueprint:
    result: *Blueprint
    bps = Dist.list_blueprints()
    for bp <- bps:
      if bp.name == name:
        result <<- bp
    <- result

func find_service(blueprint_id: string) -> ?Service:
    result: *Service
    services = Srv.list()
    for serv <- services:
      if serv.blueprint_id == blueprint_id:
        result <<- serv
    <- result

func deploy_storage(records: []Record):
    Op.noop()

func deploy_healthcheck_service(records: []Record):
    Op.noop()
    

func join(key: string):
    records, error <- get_records(key, 5)
    script_records <- find_records(records, "IpfsAirScript")
    rec = script_records[0]
    path = get_from(rec.metadata.peer_id, rec.metadata.service_id!, "")
    Script.add_from_vault(path.path, [10])

    service_records <- find_records(records, "healthcheck_service")
    service_record = service_records[0]
    -- TODO: check if there is enough HealthCheckStorage services
    --       if not, deploy one 
