; This file is auto-generated. Do not edit manually: changes may be erased.
; Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
; If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
; Aqua version: 0.7.7-353

(new $storages
 (new $services
  (new $errs_get
   (seq
    (seq
     (seq
      (seq
       (seq
        (new $records
         (new $successful
          (new $result
           (seq
            (seq
             (seq
              (seq
               (seq
                (call %init_peer_id% ("op" "string_to_b58") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o"] k)
                (call %init_peer_id% ("kad" "neighborhood") [k [] []] nodes)
               )
               (par
                (fold nodes n-0
                 (par
                  (seq
                   (xor
                    (seq
                     (seq
                      (call n-0 ("peer" "timestamp_sec") [] t)
                      (call n-0 ("registry" "get_records") ["8QHLESWXC5UKheU9UJ9MthgTTxaUULnPAdw2VFrmnn7o" t] get_result)
                     )
                     (xor
                      (match get_result.$.success! true
                       (seq
                        (ap get_result.$.result! $records)
                        (ap true $successful)
                       )
                      )
                      (ap get_result.$.error! $error-0)
                     )
                    )
                    (call n-0 ("op" "noop") [])
                   )
                   (call %init_peer_id% ("op" "noop") [])
                  )
                  (next n-0)
                 )
                 (never)
                )
                (null)
               )
              )
              (new $status-0
               (new $result-0
                (seq
                 (seq
                  (seq
                   (par
                    (seq
                     (seq
                      (call %init_peer_id% ("math" "sub") [5 1] sub)
                      (new $successful_test
                       (seq
                        (fold $successful s
                         (seq
                          (seq
                           (seq
                            (call %init_peer_id% ("math" "add") [sub 1] incr_idx)
                            (ap s $successful_test)
                           )
                           (canon %init_peer_id% $successful_test  #successful_iter_canon)
                          )
                          (xor
                           (match #successful_iter_canon.length incr_idx
                            (null)
                           )
                           (next s)
                          )
                         )
                         (never)
                        )
                        (canon %init_peer_id% $successful_test  #successful_result_canon)
                       )
                      )
                     )
                     (ap "ok" $status-0)
                    )
                    (call %init_peer_id% ("peer" "timeout") [6000 "timeout"] $status-0)
                   )
                   (new $status-0_test
                    (seq
                     (fold $status-0 s
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("math" "add") [0 1] incr_idx)
                         (ap s $status-0_test)
                        )
                        (canon %init_peer_id% $status-0_test  #status-0_iter_canon)
                       )
                       (xor
                        (match #status-0_iter_canon.length incr_idx
                         (null)
                        )
                        (next s)
                       )
                      )
                      (never)
                     )
                     (canon %init_peer_id% $status-0_test  #status-0_result_canon)
                    )
                   )
                  )
                  (xor
                   (match #status-0_result_canon.$.[0]! "ok"
                    (ap true $result-0)
                   )
                   (ap false $result-0)
                  )
                 )
                 (canon %init_peer_id% $result-0  #result-fix-0)
                )
               )
              )
             )
             (xor
              (match #result-fix-0.$.[0]! false
               (ap "timeout exceeded" $error-0)
              )
              (seq
               (seq
                (canon %init_peer_id% $records  #records_canon)
                (call %init_peer_id% ("registry" "merge") [#records_canon] merged)
               )
               (xor
                (match merged.$.success! false
                 (ap merged.$.error! $error-0)
                )
                (ap merged.$.result! $result)
               )
              )
             )
            )
            (canon %init_peer_id% $result  #result-fix)
           )
          )
         )
        )
        (canon %init_peer_id% $error-0  #push-to-stream-11)
       )
       (ap #push-to-stream-11 $error)
      )
      (canon %init_peer_id% $error  #push-to-stream-9)
     )
     (ap #push-to-stream-9 $errs_get)
    )
    (xor
     (mismatch #result-fix []
      (seq
       (seq
        (seq
         (seq
          (seq
           (seq
            (seq
             (seq
              (ap #result-fix.$.[0]! result-fix_flatten)
              (fold result-fix_flatten r-0
               (seq
                (xor
                 (match r-0.$.metadata.value! "role=service"
                  (ap r-0 $result-1)
                 )
                 (call %init_peer_id% ("op" "noop") [])
                )
                (next r-0)
               )
              )
             )
             (canon %init_peer_id% $result-1  #push-to-stream-90)
            )
            (ap #push-to-stream-90 $services)
           )
           (ap #result-fix.$.[0]! result-fix_flatten-0)
          )
          (fold result-fix_flatten-0 r-1-0
           (seq
            (xor
             (match r-1-0.$.metadata.value! "role=healthcheckstorage"
              (ap r-1-0 $result-2)
             )
             (call %init_peer_id% ("op" "noop") [])
            )
            (next r-1-0)
           )
          )
         )
         (canon %init_peer_id% $result-2  #push-to-stream-100)
        )
        (ap #push-to-stream-100 $storages)
       )
       (par
        (seq
         (canon %init_peer_id% $services  #services_canon)
         (fold #services_canon s-0
          (par
           (new $status
            (seq
             (seq
              (seq
               (fold s-0.$.metadata.relay_id! -via-peer-
                (seq
                 (call -via-peer- ("op" "noop") [])
                 (next -via-peer-)
                )
               )
               (call s-0.$.metadata.peer_id! (s-0.$.metadata.service_id.[0]! "ok") [] ok)
              )
              (xor
               (match ok true
                (ap "OK" $status)
               )
               (ap "BAD" $status)
              )
             )
             (par
              (seq
               (canon s-0.$.metadata.peer_id! $storages  #storages_canon)
               (fold #storages_canon storage-0
                (par
                 (seq
                  (seq
                   (seq
                    (seq
                     (seq
                      (fold s-0.$.metadata.relay_id! -via-peer-
                       (seq
                        (call -via-peer- ("op" "noop") [])
                        (next -via-peer-)
                       )
                      )
                      (fold storage-0.$.metadata.relay_id! -via-peer-
                       (seq
                        (call -via-peer- ("op" "noop") [])
                        (next -via-peer-)
                       )
                      )
                     )
                     (call storage-0.$.metadata.peer_id! ("peer" "timestamp_ms") [] ts)
                    )
                    (new $status_test
                     (seq
                      (fold $status s
                       (seq
                        (seq
                         (seq
                          (call storage-0.$.metadata.peer_id! ("math" "add") [0 1] incr_idx)
                          (ap s $status_test)
                         )
                         (canon storage-0.$.metadata.peer_id! $status_test  #status_iter_canon)
                        )
                        (xor
                         (match #status_iter_canon.length incr_idx
                          (null)
                         )
                         (next s)
                        )
                       )
                       (never)
                      )
                      (canon storage-0.$.metadata.peer_id! $status_test  #status_result_canon)
                     )
                    )
                   )
                   (ap #status_result_canon.$.[0]! status_result_canon_flatten)
                  )
                  (call storage-0.$.metadata.peer_id! (storage-0.$.metadata.service_id.[0]! "store_status") [status_result_canon_flatten s-0.$.metadata.peer_id! s-0.$.metadata.service_id.[0]! ts])
                 )
                 (next storage-0)
                )
                (never)
               )
              )
              (null)
             )
            )
           )
           (next s-0)
          )
          (never)
         )
        )
        (null)
       )
      )
     )
     (call %init_peer_id% ("op" "noop") [])
    )
   )
  )
 )
)
